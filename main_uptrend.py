from Entry_Super import get_final_trend  # Import h√†m ph√¢n t√≠ch xu h∆∞·ªõng t·ªïng th·ªÉ 
from binance.client import Client
from flask import Flask
import time
import threading
import pytz
from datetime import datetime
from PNL_Check import extract_pnl_and_position_info, get_pnl_percentage, get_pnl_usdt  # S·ª≠ d·ª•ng h√†m t·ª´ PNL_Check
from trade_history import save_trade_history  # Import t·ª´ trade_history.py
import socket
from playsound import playsound
from atr_check import atr_stop_loss_finder  # G·ªçi h√†m t·ª´ file atr_calculator.py
from TPO_POC import calculate_poc_value  
from VWAP import get_vwap_signal

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ client v√† th√¥ng tin giao d·ªãch
client = None
last_order_status = None  # Bi·∫øn l∆∞u tr·ªØ tr·∫°ng th√°i l·ªánh cu·ªëi c√πng
stop_loss_price = None  # Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u gi√° tr·ªã stop-loss

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Flask
app = Flask(__name__)

# H√†m ki·ªÉm tra k·∫øt n·ªëi Internet
def is_connected():
    try:
        socket.create_connection(("8.8.8.8", 53), 2)
        return True
    except OSError:
        return False

def alert_sound():
    try:
        print(f"L·ªói ph√°t √¢m thanh: {str(e)}")
        playsound(r"C:\Users\DELL\Desktop\GPT train\noconnect.mp3")
    except Exception as e:
        print(f"L·ªói ph√°t √¢m thanh: {str(e)}")

def check_internet_and_alert():
    try:
        if not is_connected():
            print("M·∫•t k·∫øt n·ªëi internet. ƒêang ph√°t c·∫£nh b√°o...")
            playsound(r"C:\Users\DELL\Desktop\GPT train\noconnect.mp3")
            time.sleep(5)
            return False
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra k·∫øt n·ªëi: {str(e)}")
        #playsound(r"C:\Users\DELL\Desktop\GPT train\noconnect.mp3")
        time.sleep(5)
        return False
    return True

@app.route('/')
def home():
    global last_order_status
    current_balance = get_account_balance(client)
    extract_pnl_and_position_info(client, 'BTCUSDT')
    pnl_percentage = get_pnl_percentage()
    position_info = client.futures_position_information(symbol='BTCUSDT')
    entry_price = float(position_info[0]['entryPrice'])
    mark_price = float(position_info[0]['markPrice'])
    qty = float(position_info[0]['positionAmt'])
    position_type = "Long" if qty > 0 else "Short" if qty < 0 else "Kh√¥ng c√≥ v·ªã th·∫ø"
    
    # Ki·ªÉm tra n·∫øu pnl_percentage l√† None
    if pnl_percentage is None:
        pnl_percentage = 0.0  # Ho·∫∑c c√≥ th·ªÉ g√°n m·ªôt gi√° tr·ªã kh√°c n·∫øu c·∫ßn
        pnl_display = "PNL ch∆∞a c√≥ gi√° tr·ªã"
    else:
        pnl_display = f"{pnl_percentage:.2f}%"
    
    pnl_color = 'green' if pnl_percentage >= 0 else 'red'
    pnl_width = abs(pnl_percentage)

    tz = pytz.timezone('Asia/Ho_Chi_Minh')
    current_time = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    
    return f'''
    <html>
    <head>
        <title>Binance Bot Status</title>
        <meta http-equiv="refresh" content="300">
        <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
        <style>
            body {{
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                text-align: center;
                font-family: 'Roboto', sans-serif;
                background: #f7f9fc;
                color: #333;
            }}
            .container {{
                width: 50%;
                background: #fff;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
                animation: fadeIn 1s ease-in-out;
            }}
            h1 {{
                color: #ff9f00;
            }}
            p {{
                font-size: 1.2em;
                margin: 10px 0;
            }}
            .pnl {{
                font-weight: bold;
                color: {pnl_color};
            }}
            .progress-container {{
                width: 100%;
                background-color: #ddd;
                border-radius: 5px;
                overflow: hidden;
                height: 20px;
                margin: 15px 0;
            }}
            .progress-bar {{
                height: 100%;
                width: {pnl_width}%;
                background-color: {pnl_color};
                text-align: center;
                color: white;
                line-height: 20px;
            }}
            footer {{
                margin-top: 20px;
                font-size: 0.9em;
                color: #888;
            }}
            @keyframes fadeIn {{
                from {{ opacity: 0; }}
                to {{ opacity: 1; }}
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Namtrader BTCUSDT.P Status</h1>
            <p>üíµ Gi√° tr·ªã t√†i kho·∫£n hi·ªán t·∫°i: {current_balance:.2f} USDT</p>
            <p>üìà Entry Price: {entry_price:.2f} USDT</p>
            <p>üí∞ Mark Price: {mark_price:.2f} USDT</p>
            <p>üìâ V·ªã th·∫ø hi·ªán t·∫°i: {position_type}</p>
            <p class="pnl">PNL hi·ªán t·∫°i: <span class="progress-container"><span class="progress-bar">{pnl_display}</span></span></p>
            <p>Tr·∫°ng th√°i l·ªánh cu·ªëi c√πng: {last_order_status}</p>
            <p>üïí Th·ªùi gian hi·ªán t·∫°i (UTC+7): {current_time}</p>
            <footer>
                <p>&copy; 2024 NamTrading Bot</p>
            </footer>
        </div>
    </body>
    </html>
    '''


# H√†m l·∫•y gi√° tr·ªã t√†i kho·∫£n Futures
def get_account_balance(client):
    account_info = client.futures_account()
    usdt_balance = float(account_info['totalWalletBalance'])
    return usdt_balance

# H√†m c√†i ƒë·∫∑t ƒë√≤n b·∫©y cho giao d·ªãch Futures
def set_leverage(client, symbol, leverage):
    try:
        response = client.futures_change_leverage(symbol=symbol, leverage=leverage)
        print(f"ƒê√£ c√†i ƒë·∫∑t ƒë√≤n b·∫©y {response['leverage']}x cho {symbol}.")
    except Exception as e:
        print(f"L·ªói khi c√†i ƒë·∫∑t ƒë√≤n b·∫©y: {str(e)}")

# H√†m ki·ªÉm tra n·∫øu c√≥ l·ªánh n√†o ƒëang m·ªü
def check_open_position(client, symbol):
    position_info = client.futures_position_information(symbol=symbol)
    qty = float(position_info[0]['positionAmt'])
    return qty != 0

def place_order(client, order_type):
    global last_order_status, stop_loss_price
    symbol = 'BTCUSDT'
    
    # G·ªçi h√†m atr_stop_loss_finder ƒë·ªÉ l·∫•y c√°c gi√° tr·ªã ATR
    atr_short_stop_loss, atr_long_stop_loss = atr_stop_loss_finder(client, symbol)
    
    usdt_balance = get_account_balance(client)
    klines = client.futures_klines(symbol=symbol, interval='1h', limit=1)  # L·∫•y n·∫øn hi·ªán t·∫°i
    mark_price = float(klines[0][4])

    # T√≠nh percent_change d·ª±a tr√™n ki·ªÉu l·ªánh (buy/sell)
    percent_change = None
    if order_type == "buy":
        percent_change = ((atr_long_stop_loss - mark_price) / mark_price) * 100
        stop_loss_price = atr_long_stop_loss  # ƒê·∫∑t Stop Loss cho l·ªánh Buy
    elif order_type == "sell":
        percent_change = ((mark_price - atr_short_stop_loss) / mark_price) * 100
        stop_loss_price = atr_short_stop_loss  # ƒê·∫∑t Stop Loss cho l·ªánh Sell

    if percent_change is not None and percent_change != 0:
        leverage = 100 / abs(percent_change)
        leverage = max(1, min(round(leverage), 125))  # ƒê·∫£m b·∫£o leverage n·∫±m trong kho·∫£ng 1-125
        set_leverage(client, symbol, leverage)

    trading_balance = 27 * leverage  # S·ª≠ d·ª•ng R:R ƒë·ªÉ t√≠nh s·ªë l∆∞·ª£ng giao d·ªãch - Risk=25$
    ticker = client.get_symbol_ticker(symbol=symbol)
    btc_price = float(ticker['price'])
    quantity = round(trading_balance / btc_price, 3)

    if quantity <= 0:
        print("S·ªë l∆∞·ª£ng giao d·ªãch kh√¥ng h·ª£p l·ªá. H·ªßy giao d·ªãch.")
        return

    if order_type == "buy":
        client.futures_create_order(symbol=symbol, side='BUY', type='MARKET', quantity=quantity)
        last_order_status = f"ƒê√£ mua {quantity} BTC. Stop-loss ƒë·∫∑t t·∫°i: {stop_loss_price:.2f} USDT."
        print(f"Gi√° tr·ªã stop-loss cho l·ªánh Buy: {stop_loss_price:.2f} USDT")
    elif order_type == "sell":
        client.futures_create_order(symbol=symbol, side='SELL', type='MARKET', quantity=quantity)
        last_order_status = f"ƒê√£ b√°n {quantity} BTC. Stop-loss ƒë·∫∑t t·∫°i: {stop_loss_price:.2f} USDT."
        print(f"Gi√° tr·ªã stop-loss cho l·ªánh Sell: {stop_loss_price:.2f} USDT")



# H√†m ki·ªÉm tra ƒëi·ªÅu ki·ªán Stop Loss/Take Profit (Ch·ªâ gi·ªØ ƒëi·ªÅu ki·ªán d·ª±a tr√™n PNL)
def check_sl_tp(client, symbol):
    global last_order_status, stop_loss_price
    extract_pnl_and_position_info(client, symbol)  # L·∫•y th√¥ng tin PNL v√† v·ªã th·∫ø
    pnl_percentage = get_pnl_percentage()  # Gi√° tr·ªã PNL hi·ªán t·∫°i (%)
    pnl_usdt = get_pnl_usdt()  # Gi√° tr·ªã PNL hi·ªán t·∫°i (USDT)

    # Ki·ªÉm tra n·∫øu PNL l√† None ƒë·ªÉ tr√°nh l·ªói
    if pnl_percentage is None:
        print("L·ªói: PNL kh√¥ng c√≥ gi√° tr·ªã h·ª£p l·ªá.")
        return None

    # N·∫øu PNL <= -100% (Stop Loss) ho·∫∑c PNL >= 175% (Take Profit)
    if pnl_percentage <= -100:
        print(f"ƒêi·ªÅu ki·ªán StopLoss ƒë·∫°t ƒë∆∞·ª£c (PNL <= -100%). ƒê√≥ng l·ªánh.")
        close_position(client, pnl_percentage, pnl_usdt)
    #    return "stop_loss"
    elif pnl_percentage >= 175:
        print(f"ƒêi·ªÅu ki·ªán TakeProfit ƒë·∫°t ƒë∆∞·ª£c (PNL >= 175%). ƒê√≥ng l·ªánh.")
        close_position(client, pnl_percentage, pnl_usdt)
    #   return "take_profit"

    return None

# H√†m ƒë√≥ng l·ªánh
def close_position(client, pnl_percentage, pnl_usdt):
    global last_order_status
    symbol = 'BTCUSDT'
    position_info = client.futures_position_information(symbol=symbol)
    qty = float(position_info[0]['positionAmt'])
    entry_price = float(position_info[0]['entryPrice'])
    entry_type = "Long" if qty > 0 else "Short" if qty < 0 else "Kh√¥ng c√≥ v·ªã th·∫ø"

    if qty > 0:
        client.futures_create_order(symbol=symbol, side='SELL', type='MARKET', quantity=qty)
        last_order_status = f"ƒê√£ ƒë√≥ng l·ªánh long {qty} BTC."
    elif qty < 0:
        client.futures_create_order(symbol=symbol, side='BUY', type='MARKET', quantity=abs(qty))
        last_order_status = f"ƒê√£ ƒë√≥ng l·ªánh short {abs(qty)} BTC."
    else:
        last_order_status = "Kh√¥ng c√≥ v·ªã th·∫ø m·ªü."

    pnl_percentage_display = f"+{pnl_percentage:.2f}%" if pnl_percentage > 0 else f"-{abs(pnl_percentage):.2f}%"
    pnl_usdt_display = f"+{pnl_usdt:.2f} USDT" if pnl_usdt > 0 else f"-{abs(pnl_usdt):.2f} USDT"
    print(f"ƒê√≥ng l·ªánh - PNL hi·ªán t·∫°i (USDT): {pnl_usdt_display}, PNL hi·ªán t·∫°i (%): {pnl_percentage_display}, Entry Price: {entry_price:.2f} USDT, Entry Type: {entry_type}")
    save_trade_history(pnl_percentage, pnl_usdt, entry_price, entry_type)

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi s·ªë v√≤ng l·∫∑p
loop_count = 0  # Kh·ªüi t·∫°o bi·∫øn ƒë·∫øm v√≤ng l·∫∑p

# H√†m bot giao d·ªãch ch·∫°y m·ªói 60 gi√¢y
def trading_bot():
    global client, loop_count
    api_key = '1YViGTrm46GQGmfwKXc2tazzLbe1TRvlDykNcptZOtRlQJUBJmYq7NanS0tNxKRB'
    api_secret = '5i0Io4YRiL4euqkG6LbVymY2zVW3OF386xw4aedwxgYYygRdfxhc4NSGhbZ9SEki'
    client = Client(api_key, api_secret, tld='com', testnet=False)
    symbol = 'BTCUSDT'

    while True:
        try:
            # Ki·ªÉm tra k·∫øt n·ªëi Internet
            if not check_internet_and_alert():
                continue

            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán Stop Loss ho·∫∑c Take Profit
            result = check_sl_tp(client, symbol)
            if result == "stop_loss" or result == "take_profit":
                break

            # L·∫•y th√¥ng tin v·ªã th·∫ø hi·ªán t·∫°i
            position_info = client.futures_position_information(symbol=symbol)
            qty = float(position_info[0]['positionAmt'])

            # N·∫øu ƒë√£ c√≥ l·ªánh m·ªü, gi·∫£m th·ªùi gian v√≤ng l·∫∑p xu·ªëng 60 gi√¢y
            if qty != 0:  # N·∫øu c√≥ v·ªã th·∫ø m·ªü cho BTCUSDT
                print("Hi·ªán ƒë√£ c√≥ l·ªánh m·ªü cho BTCUSDT. V√≤ng l·∫∑p s·∫Ω l·∫∑p l·∫°i sau 60 gi√¢y.")
                time.sleep(60)
                continue  # Ti·∫øp t·ª•c v√≤ng l·∫∑p ƒë·ªÉ ki·ªÉm tra l·∫°i sau 60 gi√¢y

            # N·∫øu kh√¥ng c√≥ v·ªã th·∫ø m·ªü, ki·ªÉm tra xu h∆∞·ªõng v√† th·ª±c hi·ªán giao d·ªãch
            final_trend = get_final_trend(client)
            print(f"K·∫øt qu·∫£ xu h∆∞·ªõng t·ª´ h√†m get_final_trend(): {final_trend}")

            # N·∫øu xu h∆∞·ªõng kh√¥ng r√µ r√†ng, ngh·ªâ l√¢u h∆°n (600 gi√¢y)
            if final_trend == "Xu h∆∞·ªõng kh√¥ng r√µ r√†ng":
                print("Xu h∆∞·ªõng kh√¥ng r√µ r√†ng. Ngh·ªâ 600 gi√¢y.")
                time.sleep(600)
                continue

            # Logic POC 
            mark_price = float(position_info[0]['markPrice'])
            poc_value = calculate_poc_value(client)
            price_difference_percent = abs((poc_value - mark_price) / mark_price) * 100

            if price_difference_percent <= 0.5:  # ƒêi·ªÅu ki·ªán ch√™nh l·ªách kh√¥ng qu√° 0.5%
                if final_trend == "Xu h∆∞·ªõng tƒÉng":
                    print("Xu h∆∞·ªõng tƒÉng. POC value g·∫ßn mark price. Th·ª±c hi·ªán l·ªánh mua.")
                    place_order(client, "buy")
                elif final_trend == "Xu h∆∞·ªõng gi·∫£m":
                    print("Xu h∆∞·ªõng gi·∫£m. POC value g·∫ßn mark price. Th·ª±c hi·ªán l·ªánh b√°n.")
                    place_order(client, "sell")
            else:
                print(f"Ch√™nh l·ªách gi·ªØa POC v√† mark price: {price_difference_percent:.2f}%. Kh√¥ng th·ª±c hi·ªán l·ªánh.")

            # Logic ƒë·ªôc l·∫≠p cho VWAP
            vwap_signal = get_vwap_signal(symbol="BTCUSDT")
            print(f"T√≠n hi·ªáu VWAP: {vwap_signal}")
            if final_trend == "Xu h∆∞·ªõng tƒÉng" and vwap_signal == 1:
                print("Xu h∆∞·ªõng tƒÉng v√† t√≠n hi·ªáu VWAP l√† 1. Th·ª±c hi·ªán l·ªánh mua (VWAP).")
                place_order(client, "buy")
            elif final_trend == "Xu h∆∞·ªõng gi·∫£m" and vwap_signal == 0:
                print("Xu h∆∞·ªõng gi·∫£m v√† t√≠n hi·ªáu VWAP l√† 0. Th·ª±c hi·ªán l·ªánh b√°n (VWAP).")
                place_order(client, "sell")

            # Sau khi th·ª±c hi·ªán giao d·ªãch, n·∫øu kh√¥ng c√≥ v·ªã th·∫ø, ti·∫øp t·ª•c v√≤ng l·∫∑p sau 60 gi√¢y
            time.sleep(60)

            # TƒÉng bi·∫øn ƒë·∫øm v√≤ng l·∫∑p
            loop_count += 1

            # Reset sau 100 v√≤ng l·∫∑p
            if loop_count >= 100:
                print("ƒê√£ ƒë·∫°t 100 v√≤ng l·∫∑p. Reset d·ªØ li·ªáu...")
                last_order_status = None  # Reset tr·∫°ng th√°i l·ªánh cu·ªëi c√πng
                stop_loss_price = None  # Reset gi√° tr·ªã stop-loss
                loop_count = 0  # Reset l·∫°i bi·∫øn ƒë·∫øm v√≤ng l·∫∑p
                client = Client(api_key, api_secret, tld='com', testnet=False)  # Reset l·∫°i client n·∫øu c·∫ßn

        except Exception as e:
            print(f"L·ªói khi g·ªçi API ho·∫∑c x·ª≠ l√Ω giao d·ªãch: {str(e)}")
            time.sleep(5)


if __name__ == "__main__":
    trading_thread = threading.Thread(target=trading_bot)
    trading_thread.start()
    app.run(host='0.0.0.0', port=8080)
